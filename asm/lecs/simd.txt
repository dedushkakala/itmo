Первое было в Pentium MMX. Можно было раскодировать MPEG1 320x240 30fps.

Добавили 8 новых 64 битных регистра: mm0..mm7 
Не совсем новых, так как это младшие 64 бита r0..r7(мантиса)

Когда выполняешь команду с mm, то все r0..r7 помечаются как занятые
Поэтому есть emms - зачистить все регистры r. Перед возвратом надо созранить в память, зачистить и положить в st0

Типы данных:
NUMxSIZE
8x8
4x16
2x32
1x64

2) 
Команды:
MOVQ (mm*, mm*)/(mm*, ptr[...]) - скопировать
MOVD (mm*, reg)/(mm*, ptr[...]) - записать первые 32 бита(хорошо по скорости). Когда пишется записывается в 64.

PACKSS(WB|DW)/PACKUSWB mm* (mm*/(ptr[...])) - запаковка
SS - signed saturation
US - получается ансигнет из сингнед - ансигнед насыщение кламп в ансигнед
DW - dword word с насыщением - (больше максимума - максимум, меньше минимума - минимум). По факту кламп нахаляву в сигнед

.)PUNPCK(L|H)(BW|WD|DQ) -||-

L|H - старшие или младшие 2

Ex: puupckhwd mm0, mm1 : mm0[1|2|3|4] mm1[5|6|7|8] -> mm0[1|5|2|6]


.)PADD (B|W|D) - обычное умножение

Ex: paddw mm0, mm1 : mm0[1|2|3|4] mm1[5|6|7|8] -> mm0[1+5|2+6|3+7|4+8]

.)PADD(US|S)(B|W) со знаковым/беззнаковым клампом

.)PMUL(L|H)W умножение

Ex: mm0 x mm1 16 x 16 = 32

movq mm2, mm0
pmullw mm0, mm1
pmulhw mm2, mm1
ppack

.)PMADDWD сложение двух чисел рядом в одном регистре - пример
mm0[1|2|3|4] mm1[5|6|7|8] -> mm0[1*5+2*6|3*7+4*8]

.)PCMPEQ(B|W|D) или PCMPGT(B|W|D) если выполняется записать 1, если нет - записать 0
.)pand, por, pxor, pandn - работает с полностью регистрами
.)psll(b|w|d), psrl(b|w|d), psra(b|w) - сдвиги каждых кусочков

Дальше было 3DNow!, которое позволяло работать с 2 флотами.
Дальше SSE - pentium 3 - xmm0..xmm7 - 128 битные - 4 флота.

movaps - аналог movq
movups - не падает если данные невыровнены(
addss/addps - скаляная\векторная форма

Дальше SSE2 - теперь можно два дабли или 4 флота и разрешили делать xmm регистры в mmx операциях - pentium 4
SSE3 - Core 2 - добавили некоторые команды типа попеременного сложения вычитания, что нужно комплексной арифметике

SSSE3 - целочисленное разрешение
palignr xmm*, xmm*, const. Скрещивает два 128 -> 256 и вырезает 128 с позиции константы

pshufw dst, src, const8



|x|x3|x5|x7|

SSE4.1 - разные формы команды 
SSE4.2 - работа со строками
SSE4A - movaps не падает при каком-то поставленном флаге процессора

AWX - добавили ymm только для флотов и даблов
AWX2 - добавили для ymm целые
AWX512 - zmm 512 бит. Следовательно ALU 512 бит
FMA - для любителей аффинныъ преобразований. a = b * c + d. Работает за одно округления.
BMI bit magic instructions - битовая магия x & (!y)
AES-NI - реализация алгоритма AES
 